<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--
        下面的context-param和listener的设置创建了一个spring容器
        而DispatcherServlet也创建了一个spring容器.并且会把spring容器
        放到ServletContext中

        然后在DispatcherServlet创建spring容器的过程中,它会查找ServletContext
        中是否已经有了spring 容器,如果有就把ServletContext中的spring容器作为自己创建
        的spring容器的父容器

        父子容器最基本的知识点:
        当你getBean的时候,先从子容器查找,找到即返回,找不到就去父容器查找
        但是"不能"先从父容器找再到子容器找


        如果在子容器扫描了service包,但是没有事务管理器和事务的注解驱动这些配置
        就会导致事务失效,原因是这样:
        1.controller需要service,就开始在本容器(子容器)中查找,就可以找到service
        2.因为本容器没有相关的事务设定,所以子容器找到的service就没有进行事务的处理

        即使子容器配置了事务以及扫描了service,就会导致父子容器都有service的bean

        有父子容器之后,强烈建议:扫描的东西精确,不要父子容器都有相同的bean
    -->
    
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:app-spring.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--DispatcherServlet创建的Spring 容器是 子容器-->
    
    <servlet>
        <servlet-name>System</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:mvc-spring.xml</param-value>
        </init-param>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>System</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <filter>
        <filter-name>encodint</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>encodint</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <error-page>
        <error-code>404</error-code>
        <location>/error</location>
    </error-page>
</web-app>